- hosts: localhost
  tasks:

    - set_fact:

        # this file has been fetched from the lnx_setup host, by the lnxclp-new role
        # playbook_dir is undocumented, but check the source:
        # https://github.com/ansible/ansible/blob/143bafec9a506aff8f42ca573c7006a8c5549e12/lib/ansible/vars/hostvars.py#L40
        charts_dir: "{{playbook_dir}}/../charts"

      no_log: yes

    - name: "run 'use-context' for verification"
      shell: "{{playbook_dir}}/../../.local/scripts/use-context"

    - name: "k8s: kube-flannel namespace"
      wd_k8snamespace:
        namespace: kube-flannel

    - name: "k8s: chart wd-flannel"
      wd_helm3:
        chart: "{{ charts_dir }}/wd-flannel"
        atomic: yes
        namespace: kube-flannel

    - name: "k8s: kube-metallb namespace"
      wd_k8snamespace:
        namespace: kube-metallb

    - name: "k8s: chart wd-metallb"
      wd_helm3:
        chart: "{{ charts_dir }}/wd-metallb"
        namespace: kube-metallb
        atomic: yes
        values:
          default_ip_range: "{{k8s_loadbalancers_default_ip_range}}"
          ingress_ip: "{{k8s_loadbalancers_ingress_ip}}"

    - name: "k8s: kube-dashboard namespace"
      wd_k8snamespace:
        namespace: kube-dashboard

    - name: "k8s: wd-k8sdashboard"
      wd_helm3:
        chart: "{{ charts_dir }}/wd-k8sdashboard"
        namespace: kube-dashboard
        atomic: yes
        values:
          cluster_dns_name: "{{k8s_cluster_dnsname}}"

    - name: "k8s: kube-traefik-ingress namespace"
      wd_k8snamespace:
        namespace: kube-traefik-ingress

    - name: "k8s: wd-traefik-ingress"
      wd_helm3:
        chart: "{{ charts_dir }}/wd-traefik-ingress"
        namespace: kube-traefik-ingress
        atomic: yes

    - name: "k8s: wd-nginx-test"
      wd_helm3:
        chart: "{{ charts_dir }}/wd-nginx-test"
        namespace: default
        values:
          cluster_dns_name: "{{k8s_cluster_dnsname}}"

    - name: Include trident tasks, if trident is enabled is set
      include_tasks: tasks/tridentinstall.yml
      when: trident.enabled

    - name: "k8s: kube-harbor namespace"
      wd_k8snamespace:
        namespace: kube-harbor

    - name: "k8s: install harbor chart"
      wd_helm3:
        chart: "{{ charts_dir }}/harbor"
        namespace: kube-harbor
        atomic: no
        keepvaluesfile: yes
        values:

          # check https://github.com/goharbor/harbor-helm#configuration
          # for options reference

          # Expose
          expose:
            type: ingress
            ingress:
              hosts:
                core: "harbor.{{k8s_cluster_dnsname}}"
                notary: "notary.{{k8s_cluster_dnsname}}"
            tls:
              enabled: false   # we will enable ssl later on

          # Persistence
          persistence:
            enabled: "{{harbor.enable_persistence}}"
            resourcePolicy: keep    # keep the persistent volumnes on uninstall
            persistentVolumeClaim:
              registry:
                size: 10Gi # use 10Gi for registry store

          # General
          externalURL: "http://harbor.{{k8s_cluster_dnsname}}"
          harborAdminPassword: "{{harbor.admin_password}}"
          secretkey: "{{harbor.secret_key}}"

          # Portal
          portal:
            image:
              tag: "v{{harbor.version}}"

          # Core
          core:
            image:
              tag: "v{{harbor.version}}"

          # Jobservice
          jobservice:
            image:
              tag: "v{{harbor.version}}"

          # Registry
          registry:
            registry:
              image:
                # according to https://hub.docker.com/r/goharbor/registry-photon/tags
                # the tags are postfixed with -dev
                tag: "v{{harbor.version}}-dev"
            controller:
              image:
                tag: "v{{harbor.version}}"

          # Chartmuseum
          chartmuseum:
            enabled: false
            image:
              tag: "v{{harbor.version}}"

          # Clair
          clair:
            enabled: false
            adapter:
              image:
                tag: "v{{harbor.version}}"

          # Notary
          notary:
            enabled: false
            signer:
              image:
                tag: "v{{harbor.version}}"
            server:
              image:
                tag: "v{{harbor.version}}"

          # Database
          database:
            type: internal
            internal:
              image:
                tag: "v{{harbor.version}}"

          # Redis
          redis:
            type: internal
            internal:
              image:
                tag: "v{{harbor.version}}"

      when: harbor.enabled
